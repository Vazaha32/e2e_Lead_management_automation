import os
import requests
from pprint import pprint
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()


# Configuration
CALENDLY_API_KEY = os.getenv('CALENDLY_API_KEY')
TEST_EMAIL = os.getenv('TEST_EMAIL')

# V√©rification des variables critiques
if not CALENDLY_API_KEY:
    print("‚ùå CALENDLY_API_KEY manquant dans .env")
    exit(1)

HEADERS = {
    "Authorization": f"Bearer {CALENDLY_API_KEY}",
    "Content-Type": "application/json",
    "Calendly-API-Version": "2024-05-01"
}


# √âtape 1: R√©cup√©rer l'Organization ID
def get_organization_id():
    try:
        response = requests.get("https://api.calendly.com/users/me", headers=HEADERS)
        response.raise_for_status()

        org_uri = response.json()['resource']['current_organization']
        org_id = org_uri.split('/')[-1]

        print(f"‚úÖ Organization ID trouv√© : {org_id}")
        return org_id

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de l'Organization ID: {str(e)}")
        return None


# √âtape 2: Lister les types d'√©v√©nements
def list_event_types(org_id):
    try:
        # Utiliser l'URI compl√®te pour l'organisation
        org_uri = f"https://api.calendly.com/organizations/{org_id}"

        params = {
            "organization": org_uri,
            "active": True  # Bool√©en au lieu de cha√Æne
        }

        response = requests.get(
            "https://api.calendly.com/event_types",
            headers=HEADERS,
            params=params
        )

        # Debugging : afficher l'URL appel√©e
        print(f"\nüì° URL appel√©e : {response.request.url}")

        response.raise_for_status()

        response_data = response.json()
        events = response_data.get('collection', [])

        if not events:
            print("\n‚ÑπÔ∏è Aucun √©v√©nement actif trouv√© dans Calendly")
            return None

        print("\nüìÖ √âv√©nements disponibles :")
        for event in events:
            print(f"- {event['name']} (UUID: {event['uri'].split('/')[-1]})")

        return events[0]['uri'].split('/')[-1]

    except requests.exceptions.HTTPError as e:
        print(f"\n‚ùå Erreur HTTP {e.response.status_code}:")
        print("R√©ponse compl√®te :", e.response.text)
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors du listing des √©v√©nements: {str(e)}")
        return None

# √âtape 3: G√©n√©rer un lien de rendez-vous
def create_scheduling_link(event_uuid, email):
    try:
        payload = {
            "max_event_count": 1,
            "owner": f"https://api.calendly.com/event_types/{event_uuid}",
            "owner_type": "EventType"
        }

        response = requests.post(
            "https://api.calendly.com/scheduling_links",
            headers=HEADERS,
            json=payload
        )
        response.raise_for_status()

        link = response.json()['resource']['booking_url']
        print(f"\nüéâ Lien Calendly g√©n√©r√© : {link}")
        return link

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du lien: {str(e)}")
        return None


# Ex√©cution pas √† pas
if __name__ == "__main__":
    print("=== D√©but du test Calendly ===")

    if not TEST_EMAIL:
        print("‚ö†Ô∏è TEST_EMAIL non d√©fini dans .env, utilisation d'une valeur par d√©faut")
        TEST_EMAIL = "test@example.com"

    # 1. Authentification
    org_id = get_organization_id()
    if not org_id:
        exit(1)

    # 2. Choix de l'√©v√©nement
    event_uuid = list_event_types(org_id)
    if not event_uuid:
        exit(1)

    # 3. G√©n√©ration du lien
    test_email = "votre@email.test"  # ‚Üê Mettez un email de test
    link = create_scheduling_link(event_uuid, test_email)

    if link:
        print("\nüî• Test r√©ussi ! V√©rifiez que :")
        print("- Vous voyez le lien dans la console")
        print("- Le lien fonctionne dans le navigateur")
        print("- Un email de confirmation est re√ßu (si configur√© dans Calendly)")
    else:
        print("\nüí• Test √©chou√©. V√©rifiez :")
        print("- La validit√© du token API")
        print("- Les permissions de l'√©v√©nement dans Calendly")
        print("- Que l'√©v√©nement est actif")